module.exports = { contents: "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar react_dom_1 = require(\"react-dom\");\nvar react_jsx_1 = require(\"react-jsx\");\nfunction reactVendorDrective($rootScope, $templateCache) {\n    return {\n        scope: {\n            name: \"=\"\n        },\n        link: function (scope, element) {\n            var unmountReactElement = function unmountReactElement() {\n                delete $rootScope[scope.name];\n                react_1.unmountComponentAtNode(element[0]);\n            };\n            // Render React element\n            var renderReactComponent = function renderReactComponent(component) {\n                react_dom_1.render(component, element[0]);\n            };\n            var scopeWatchCb = function (nv) {\n                if (nv) {\n                    var data = {};\n                    data[nv.alias || \"vm\"] = nv;\n                    // Convert JSX to React element\n                    var component = react_jsx_1.client($templateCache.get(data.vm.templateUrl), {});\n                    renderReactComponent(component(data));\n                }\n            };\n            var rootScopeWatchCb = function (nv) {\n                if (nv)\n                    scope[scope.name] = nv;\n            };\n            var scopeWatch = scope.$watch(scope.name, scopeWatchCb, true);\n            var rootScopeWatch = $rootScope.$watch(scope.name, rootScopeWatchCb, true);\n            // Manually unmount the React component\n            // when the scope is destroyed.\n            scope.$on(\"$destroy\", unmountReactElement);\n        }\n    };\n}\nexports.default = reactVendorDrective;\n;\n",
dependencies: ["react","react-dom","react-jsx"],
sourceMap: {},
headerContent: undefined,
mtime: 1498604735000
};