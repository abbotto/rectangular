(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["HTMLReactParser"] = factory(require("react"));
	else
		root["HTMLReactParser"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_12__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */
	var domToReact = __webpack_require__(3);
	var htmlToDOM = __webpack_require__(6);

	// decode HTML entities by default for `htmlparser2`
	var domParserOptions = { decodeEntities: true };

	/**
	 * Convert HTML string to React elements.
	 *
	 * @param  {String}   html              - The HTML string.
	 * @param  {Object}   [options]         - The additional options.
	 * @param  {Function} [options.replace] - The replace method.
	 * @return {ReactElement|Array}
	 */
	function HTMLReactParser(html, options) {
	    if (typeof html !== 'string') {
	        throw new TypeError('First argument must be a string');
	    }
	    return domToReact(htmlToDOM(html, domParserOptions), options);
	}

	/**
	 * Export HTML to React parser.
	 */
	module.exports = HTMLReactParser;


/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Convert a string to camel case.
	 *
	 * @param  {String} string - The string.
	 * @return {String}
	 */
	function camelCase(string) {
	    if (typeof string !== 'string') {
	        throw new TypeError('First argument must be a string');
	    }

	    // hyphen found after first character
	    if (string.indexOf('-') > 0) {
	        var strings = string.toLowerCase().split('-');

	        // capitalize starting from the second string item
	        for (var i = 1, len = strings.length; i < len; i++) {
	            strings[i] = strings[i].charAt(0).toUpperCase() + strings[i].slice(1);
	        }

	        return strings.join('');
	    }

	    return string;
	}

	/**
	 * Swap key with value in an object.
	 *
	 * @param  {Object}   obj        - The object.
	 * @param  {Function} [override] - The override method.
	 * @return {Object}              - The inverted object.
	 */
	function invertObject(obj, override) {
	    if (typeof obj !== 'object' || !obj) { // null is an object
	        throw new TypeError('First argument must be an object');
	    }

	    var key;
	    var value;
	    var isOverridePresent = typeof override === 'function';
	    var overrides = {};
	    var result = {};

	    for (key in obj) {
	        value = obj[key];

	        if (isOverridePresent) {
	            overrides = override(key, value);
	            if (overrides && overrides.length === 2) {
	                result[overrides[0]] = overrides[1];
	                continue;
	            }
	        }

	        if (typeof value === 'string') {
	            result[value] = key;
	        }
	    }

	    return result;
	}

	/**
	 * Export utilties.
	 */
	module.exports = {
	    camelCase: camelCase,
	    invertObject: invertObject
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */
	var utilities = __webpack_require__(1);
	var propertyConfig = __webpack_require__(4);
	var config = propertyConfig.config;
	var isCustomAttribute = propertyConfig.HTMLDOMPropertyConfig.isCustomAttribute;

	/**
	 * Make attributes compatible with React props.
	 *
	 * @param  {Object} attributes - The attributes.
	 * @return {Object}            - The props.
	 */
	function attributesToProps(attributes) {
	    attributes = attributes || {};
	    var props = {};
	    var propertyName;
	    var propertyValue;
	    var reactProperty;

	    for (propertyName in attributes) {
	        propertyValue = attributes[propertyName];

	        // custom attributes (`data-` and `aria-`)
	        if (isCustomAttribute(propertyName)) {
	            props[propertyName] = propertyValue;
	            continue;
	        }

	        // make HTML DOM attribute/property consistent with React attribute/property
	        reactProperty = config.html[propertyName.toLowerCase()];
	        if (reactProperty) {
	            props[reactProperty] = propertyValue;
	            continue;
	        }

	        // make SVG DOM attribute/property consistent with React attribute/property
	        reactProperty = config.svg[propertyName];
	        if (reactProperty) {
	            props[reactProperty] = propertyValue;
	        }
	    }

	    // convert inline style to object
	    if (attributes.style) {
	        props.style = cssToJs(attributes.style);
	    }

	    return props;
	}

	/**
	 * Convert CSS style string to JS style object.
	 *
	 * @param  {String} style - The CSS style.
	 * @return {Object}       - The JS style object.
	 */
	function cssToJs(style) {
	    if (typeof style !== 'string') {
	        throw new Error('`cssToJs`: first argument must be a string. ');
	    }

	    var result = {};
	    // e.g., `color: #f00`
	    var declarations = style.split(';');
	    // css property itemized as key and value
	    var properties;
	    var j;
	    var propertiesLen;

	    for (var i = 0, declarationsLen = declarations.length; i < declarationsLen; i++) {
	        properties = declarations[i].trim().split(':');

	        // skip if not a css property
	        if (properties.length !== 2) { continue; }

	        // css property name
	        properties[0] = properties[0].trim();
	        // css property value
	        properties[1] = properties[1].trim();

	        if (properties[0] && properties[1]) {
	            for (j = 0, propertiesLen = properties.length; j < propertiesLen; j++) {
	                result[utilities.camelCase(properties[0])] = properties[1];
	            }
	        }
	    }

	    return result;
	}

	/**
	 * Export attributes to props helper.
	 */
	module.exports = attributesToProps;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */
	var React = __webpack_require__(12);
	var attributesToProps = __webpack_require__(2);

	/**
	 * Convert DOM nodes to React elements.
	 *
	 * @param  {Array}    nodes             - The DOM nodes.
	 * @param  {Object}   [options]         - The additional options.
	 * @param  {Function} [options.replace] - The replace method.
	 * @return {ReactElement|Array}
	 */
	function domToReact(nodes, options) {
	    options = options || {};
	    var result = [];
	    var node;
	    var isReplacePresent = typeof options.replace === 'function';
	    var replacement;
	    var props;
	    var children;

	    for (var i = 0, len = nodes.length; i < len; i++) {
	        node = nodes[i];

	        // replace with custom React element (if applicable)
	        if (isReplacePresent) {
	            replacement = options.replace(node);

	            if (React.isValidElement(replacement)) {
	                // specify a "key" prop if element has siblings
	                // https://fb.me/react-warning-keys
	                if (len > 1) {
	                    replacement = React.cloneElement(replacement, { key: i });
	                }
	                result.push(replacement);
	                continue;
	            }
	        }

	        if (node.type === 'text') {
	            result.push(node.data);
	            continue;
	        }

	        // update values
	        props = attributesToProps(node.attribs);
	        children = null;

	        // node type for <script> is "script"
	        // node type for <style> is "style"
	        if (node.type === 'script' || node.type === 'style') {
	            // prevent text in <script> or <style> from being escaped
	            // https://facebook.github.io/react/tips/dangerously-set-inner-html.html
	            if (node.children[0]) {
	                props.dangerouslySetInnerHTML = {
	                    __html: node.children[0].data
	                };
	            }

	        } else if (node.type === 'tag') {
	            // setting textarea value in children is an antipattern in React
	            // https://facebook.github.io/react/docs/forms.html#why-textarea-value
	            if (node.name === 'textarea' && node.children[0]) {
	                props.defaultValue = node.children[0].data;

	            // continue recursion of creating React elements (if applicable)
	            } else if (node.children && node.children.length) {
	                children = domToReact(node.children, options);
	            }

	        // skip all other cases (e.g., comment)
	        } else {
	            continue;
	        }

	        // specify a "key" prop if element has siblings
	        // https://fb.me/react-warning-keys
	        if (len > 1) {
	            props.key = i;
	        }

	        result.push(
	            React.createElement(node.name, props, children)
	        );
	    }

	    if (result.length === 1) {
	        return result[0];
	    } else {
	        return result;
	    }
	}

	/**
	 * Export DOM to React parser.
	 */
	module.exports = domToReact;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */
	var utilities = __webpack_require__(1);

	// HTML and SVG DOM Property Configs
	var HTMLDOMPropertyConfig = __webpack_require__(9);
	var SVGDOMPropertyConfig = __webpack_require__(10);

	var config = {
	    html: {},
	    svg: {}
	};

	var propertyName;

	/**
	 * HTML DOM property config.
	 */

	// first map out the HTML DOM attribute names
	// e.g., { className: 'class' } => { 'class': 'className' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L204
	config.html = utilities.invertObject(
	    HTMLDOMPropertyConfig.DOMAttributeNames
	);

	// then map out the rest of the HTML DOM properties
	// e.g., { charSet: 0 } => { charset: 'charSet' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L28
	for (propertyName in HTMLDOMPropertyConfig.Properties) {
	    // lowercase to make matching property names easier
	    config.html[propertyName.toLowerCase()] = propertyName;
	}

	/**
	 * SVG DOM property config.
	 */

	// first map out the SVG DOM attribute names
	// e.g., { fontSize: 'font-size' } => { 'font-size': 'fontSize' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/SVGDOMPropertyConfig.js#L36
	config.svg = utilities.invertObject(
	    SVGDOMPropertyConfig.DOMAttributeNames
	);

	// then map out the rest of the SVG DOM properties
	// e.g., { preserveAlpha: 0 } => { preserveAlpha: 'preserveAlpha' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L28
	for (propertyName in SVGDOMPropertyConfig.Properties) {
	    // do not lowercase as some svg properties are camel cased
	    config.html[propertyName] = propertyName;
	}

	/**
	 * Export React property configs.
	 */
	module.exports = {
	    config: config,
	    HTMLDOMPropertyConfig: HTMLDOMPropertyConfig,
	    SVGDOMPropertyConfig: SVGDOMPropertyConfig
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Module dependencies.
	 */
	var utilities = __webpack_require__(7);
	var formatDOM = utilities.formatDOM;

	/**
	 * Parse HTML string to DOM nodes.
	 * This uses the browser DOM API.
	 *
	 * @param  {String} html - The HTML.
	 * @return {Object}      - The DOM nodes.
	 */
	function parseDOM(html) {
	    if (typeof html !== 'string') {
	        throw new TypeError('First argument must be a string.');
	    }

	    // try to match the tags
	    var match = html.match(/<[^\/](.+?)>/g);
	    var nodes;

	    if (match && match.length) {
	        var tagMatch = match[0];

	        // directive matched
	        if (/<![^-]/.test(tagMatch)) {
	            var directive = (
	                // remove angle brackets
	                tagMatch
	                    .substring(1, tagMatch.length - 1)
	                    .trim()
	            );

	            // tag name can no longer be first match item
	            tagMatch = match[1];

	            // remove directive from html
	            html = html.substring(html.indexOf('>') + 1);
	        }

	        // first tag name matched
	        if (tagMatch) {
	            var tagName = (
	                // keep only tag name
	                tagMatch
	                    .substring(1, tagMatch.indexOf(' '))
	                    .trim()
	                    .toLowerCase()
	            )
	        }
	    }

	    // create html document to parse top-level nodes
	    if (['html', 'head', 'body'].indexOf(tagName) > -1) {
	        var doc;

	        // `new DOMParser().parseFromString()`
	        // https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document
	        if (window.DOMParser) {
	            doc = new window.DOMParser().parseFromString(html, 'text/html');

	        // `DOMImplementation.createHTMLDocument()`
	        // https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument
	        } else if (document.implementation.createHTMLDocument) {
	            doc = document.implementation.createHTMLDocument();
	            doc.documentElement.innerHTML = html;
	            doc.removeChild(doc.childNodes[0]); // remove doctype
	        }

	        // html
	        if (tagName === 'html') {
	            nodes = doc.childNodes;
	        // head and body
	        } else {
	            nodes = (
	                // do this so attributes are kept
	                // but there may be an extra head/body node
	                doc.getElementsByTagName(tagName)[0]
	                    .parentNode
	                    .childNodes
	            );
	        }

	    // `innerHTML` approach
	    } else {
	        var container = document.createElement('body');
	        container.innerHTML = html;
	        nodes = container.childNodes;
	    }

	    return formatDOM(nodes, null, directive);
	}

	/**
	 * Export HTML to DOM parser (client).
	 */
	module.exports = parseDOM;


/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Format DOM attributes to an associative array.
	 *
	 * @param  {NamedNodeMap} - The list of attributes.
	 * @return {Object}       - The object of attributes.
	 */
	function formatAttributes(attributes) {
	    var result = {};
	    var attribute;

	    // NamedNodeMap is array-like
	    for (var i = 0, len = attributes.length; i < len; i++) {
	        attribute = attributes[i];
	        result[attribute.name] = attribute.value;
	    }

	    return result;
	}

	/**
	 * Format the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.
	 *
	 * @param  {NodeList} nodes        - The DOM nodes.
	 * @param  {Object}   [parentObj]  - The formatted parent node.
	 * @param  {String}   [directive]  - The directive.
	 * @return {Object}                - The formatted DOM object.
	 */
	function formatDOM(nodes, parentObj, directive) {
	    parentObj = parentObj || null;

	    var result = [];
	    var node;
	    var prevNode;
	    var nodeObj;

	    // NodeList is array-like
	    for (var i = 0, len = nodes.length; i < len; i++) {
	        node = nodes[i];
	        // reset
	        nodeObj = {
	            next: null,
	            prev: result[i - 1] || null,
	            parent: parentObj
	        };

	        // set the next node for the previous node (if applicable)
	        prevNode = result[i - 1];
	        if (prevNode) {
	            prevNode.next = nodeObj;
	        }

	        // set the node name if it's not "#text" or "#comment"
	        // e.g., "div"
	        if (node.nodeName.indexOf('#') !== 0) {
	            nodeObj.name = node.nodeName.toLowerCase();

	            // also, nodes of type "tag" have "attribs"
	            nodeObj.attribs = {}; // default
	            if (node.attributes && node.attributes.length) {
	                nodeObj.attribs = formatAttributes(node.attributes);
	            }
	        }

	        // set the node type
	        // e.g., "tag"
	        switch (node.nodeType) {
	            // 1 = element
	            case 1:
	                if (nodeObj.name === 'script' || nodeObj.name === 'style') {
	                    nodeObj.type = nodeObj.name;
	                } else {
	                    nodeObj.type = 'tag';
	                }
	                // recursively format the children
	                nodeObj.children = formatDOM(node.childNodes, nodeObj);
	                break;
	                // 2 = attribute
	                // 3 = text
	            case 3:
	                nodeObj.type = 'text';
	                nodeObj.data = node.nodeValue;
	                break;
	                // 8 = comment
	            case 8:
	                nodeObj.type = 'comment';
	                nodeObj.data = node.nodeValue;
	                break;
	            default:
	                break;
	        }

	        result.push(nodeObj);
	    }

	    if (directive) {
	        result.unshift({
	            name: directive.substring(0, directive.indexOf(' ')).toLowerCase(),
	            data: directive,
	            type: 'directive',
	            next: result[0] ? result[0] : null,
	            prev: null,
	            parent: parentObj
	        });

	        if (result[1]) {
	            result[1].prev = result[0];
	        }
	    }

	    return result;
	}

	/**
	 * Export utilities.
	 */
	module.exports = {
	    formatAttributes: formatAttributes,
	    formatDOM: formatDOM
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(11);

	var invariant = __webpack_require__(5);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (true) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (true) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  true ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(8);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

/***/ }
/******/ ])
});
;